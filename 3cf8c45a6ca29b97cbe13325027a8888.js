"use strict";(self.__LOADABLE_LOADED_CHUNKS__=self.__LOADABLE_LOADED_CHUNKS__||[]).push([[3303],{67336:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   i: () => (/* binding */ showBlockForUserState)\n/* harmony export */ });\n/* harmony import */ var _constants_blocks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10375);\n\n\n/**\n * Returns a boolean for whether the user's state (logged in/out, new/returning) matches\n * conditional display state for showing a block.\n *\n * @param {enumerated String} blockDisplayState One of 5 display state values.\n * @param {Boolean}           userLoggedIn      Whether or not the user is logged in.\n * @param {Boolean}           returningUser     Whether or not the user is returning.\n *\n * @return {Boolean} Whether or not to show the block for the current user state.\n */\nconst showBlockForUserState = (blockDisplayState, userLoggedIn, returningUser) => blockDisplayState === _constants_blocks__WEBPACK_IMPORTED_MODULE_0__/* .BLOCK_DISPLAY_STATES */ .a.ALL_USERS || blockDisplayState === _constants_blocks__WEBPACK_IMPORTED_MODULE_0__/* .BLOCK_DISPLAY_STATES */ .a.LOGGED_IN_USERS && userLoggedIn || blockDisplayState === _constants_blocks__WEBPACK_IMPORTED_MODULE_0__/* .BLOCK_DISPLAY_STATES */ .a.LOGGED_OUT_USERS && !userLoggedIn || blockDisplayState === _constants_blocks__WEBPACK_IMPORTED_MODULE_0__/* .BLOCK_DISPLAY_STATES */ .a.ANONYMOUS_USERS && !userLoggedIn && !returningUser || blockDisplayState === _constants_blocks__WEBPACK_IMPORTED_MODULE_0__/* .BLOCK_DISPLAY_STATES */ .a.RETURNING_USERS && returningUser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjczMzYuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vdXRpbC9ibG9ja3MuanM/NmI2NCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///67336\n")},16393:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Kj: () => (/* binding */ doABTestingInputsHaveErrors),\n/* harmony export */   ds: () => (/* binding */ calculateSampleSize),\n/* harmony export */   pc: () => (/* binding */ calculateSignificance),\n/* harmony export */   q8: () => (/* binding */ calculateMarginOfError),\n/* harmony export */   wq: () => (/* binding */ calculateNPS)\n/* harmony export */ });\n/* harmony import */ var _constants_calculators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(28570);\n\n\n// Shared\n\n/**\n * Trim punctuation from input values to make calculations.\n *\n * @param {number} number The number to be sanitized.\n * @param {boolean} replacePeriods Whether or not to replace periods when santizing.\n *\n * @return {number} The sanitized number.\n */\nconst sanitizeNumber = function (num) {\n  let replacePeriods = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const regex = replacePeriods ? /(,|\\.)/g : /,/g;\n  return Number(num.toString().replace(regex, ''));\n};\n\n// Sample Size Calculator\n\n/**\n * Calculate sample size from provided values.\n *\n * @param {number} population The total number of people whose opinion or behavior your sample will represent.\n * @param {number} confidence The probability that your sample accurately reflects the attitudes of your population.\n * @param {number} marginOfError The range (measured as a percentage) that your population’s responses may deviate from your sample’s.\n *\n * @return {number} The calculated sample size.\n */\nconst calculateSampleSize = (population, confidence, marginOfError) => {\n  const sanitizedPopulation = sanitizeNumber(population, true);\n  const sanitizedMarginOfError = sanitizeNumber(marginOfError);\n  const zScore = _constants_calculators__WEBPACK_IMPORTED_MODULE_0__/* .Z_TABLE */ .xN[confidence];\n  const n_naught = (zScore / (sanitizedMarginOfError / 100)) ** 2 / 4;\n  const sampleSize = Math.ceil(sanitizedPopulation * n_naught / (n_naught + sanitizedPopulation - 1));\n  return Number.isFinite(sampleSize) ? sampleSize : 0;\n};\n\n// Margin of Error Calculator\n\n/**\n * Calculate margin of error from provided values.\n *\n * @param {number} population The total number of people whose opinion or behavior your sample will represent.\n * @param {number} confidence The probability that your sample accurately reflects the attitudes of your population.\n * @param {number} sample The number of people who took your survey.\n *\n * @return {number} The calculated margin of error.\n */\nconst calculateMarginOfError = (population, confidence, sample) => {\n  if (Number(population) === 0 || !_constants_calculators__WEBPACK_IMPORTED_MODULE_0__/* .CONFIDENCE_LEVEL_OPTIONS */ .f7.map(Number).includes(confidence) || Number(sample) === 0) {\n    return false;\n  }\n  const sanitizedPopulation = sanitizeNumber(population, true);\n  const sanitizedSampleSize = sanitizeNumber(sample, true);\n  const zScore = _constants_calculators__WEBPACK_IMPORTED_MODULE_0__/* .Z_TABLE */ .xN[confidence];\n  const marginOfError = Math.sqrt(0.25 / sanitizedSampleSize) * zScore * (Math.sqrt((sanitizedPopulation - sanitizedSampleSize) / (sanitizedPopulation - 1)) * 100);\n  return Number.isFinite(marginOfError) ? marginOfError : false;\n};\n\n// NPS Calculator\n\n/**\n * Calculate NPS from provided scores.\n * The formula for NPS is: ((% Promoters of total) - (% Detractors of total)) * 100%.\n * Detractors are scores 0 through 6 (inclusive), Passives are scores 7 and 8, Promoters are scores 9 and 10.\n *\n * @param {array} scores The occurrences of scores, sorted from 0 to 10, collected from respondents.\n *\n * @return {number} The calculated NPS.\n */\nconst calculateNPS = scores => {\n  if (!scores.every(score => typeof score === 'number')) {\n    return false;\n  }\n  const detractors = scores.slice(0, 7).reduce((a, b) => a + b);\n  const promoters = scores.slice(9, 11).reduce((a, b) => a + b);\n  const total = scores.reduce((a, b) => a + b);\n  const nps = (promoters / total - detractors / total) * 100;\n  return Math.round(nps) || false;\n};\n\n// AB Testing Calculator\n\n/**\n * Gets the normal distribution. Sourced from https://github.com/janjarfalk/get-normal-distribution/.\n *\n * @param {number} x\n * @param {number} mean The mean\n * @param {number} standardDeviation The standard deviation.\n *\n * @return {boolean} The probability that x is less than a random variable X.\n */\nconst getNormalDistribution = (x, mean, standardDeviation) => {\n  const erf = z => {\n    const sign = z >= 0 ? 1 : -1;\n    const absoluteZ = Math.abs(z);\n    const a1 = 0.254829592;\n    const a2 = -0.284496736;\n    const a3 = 1.421413741;\n    const a4 = -1.453152027;\n    const a5 = 1.061405429;\n    const p = 0.3275911;\n    const t = 1.0 / (1.0 + p * absoluteZ);\n    const y = 1.0 - ((((a5 * t + a4) * t + a3) * t + a2) * t + a1) * t * Math.exp(-absoluteZ * absoluteZ);\n    return sign * y;\n  };\n  const cdf = (x, mean, standardDeviation) => {\n    return 0.5 * (1 + erf((x - mean) / Math.sqrt(2 * standardDeviation)));\n  };\n  return Math.round(100000 * cdf(x, mean, standardDeviation)) / 100000;\n};\n\n/**\n * Checks AB Testing Calculator inputs for errors.\n *\n * @param {object} inputs The number of users and conversions for A and B variants.\n * @param {number} inputs.conversionsA The number of conversions in the A variant.\n * @param {number} inputs.conversionsB The number of conversions in the B variant.\n * @param {number} inputs.usersA The number of users in the A variant.\n * @param {number} inputs.usersB The number of users in the B variant.\n *\n * @return {boolean} Whether the provided inputs contain errors.\n */\nconst doABTestingInputsHaveErrors = _ref => {\n  let {\n    usersA,\n    conversionsA,\n    usersB,\n    conversionsB\n  } = _ref;\n  // All sanitized inputs must resolve to integers.\n  if (![usersA, conversionsA, usersB, conversionsB].map(input => sanitizeNumber(input)).every(input => Number.isInteger(input))) {\n    return true;\n  }\n  // The number of conversions cannot be greater than the number of users.\n  if (sanitizeNumber(conversionsA) > sanitizeNumber(usersA) || sanitizeNumber(conversionsB) > sanitizeNumber(usersB)) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * Calculates the statistical significance and complementary results from provided AB Testing inputs. Sourced from https://abtestguide.com/calc/.\n *\n * @param {object} inputs The number of users and conversions for A and B variants, as well as the hypothesis and confidences levels.\n *\n * @return {object} The significance result, as well as complementary values.\n */\nconst calculateSignificance = _ref2 => {\n  let {\n    confidence,\n    conversionsA,\n    conversionsB,\n    tails,\n    usersA,\n    usersB\n  } = _ref2;\n  const conversionRateA = sanitizeNumber(conversionsA) / sanitizeNumber(usersA);\n  const conversionRateB = sanitizeNumber(conversionsB) / sanitizeNumber(usersB);\n  const conversionRateChange = (conversionRateB - conversionRateA) / conversionRateA;\n  const standardErrorA = Math.sqrt(conversionRateA * (1 - conversionRateA) / sanitizeNumber(usersA));\n  const standardErrorB = Math.sqrt(conversionRateB * (1 - conversionRateB) / sanitizeNumber(usersB));\n  const standardErrorDiff = Math.sqrt(standardErrorA ** 2 + standardErrorB ** 2);\n  const zScore = (conversionRateB - conversionRateA) / standardErrorDiff;\n  const zCritical = _constants_calculators__WEBPACK_IMPORTED_MODULE_0__/* .Z_TABLE_AB_TEST */ .fC[tails][confidence];\n  const power = conversionRateChange > 0 || tails === 1 ? 1 - getNormalDistribution((conversionRateA + standardErrorA * zCritical - conversionRateB) / standardErrorB, 0, 1) : 1 - getNormalDistribution((conversionRateB + standardErrorB * zCritical - conversionRateA) / standardErrorA, 0, 1);\n  const pValue = 1 - getNormalDistribution(zScore, 0, 1);\n  let significant;\n\n  // Break this up so it is easier to read.\n  if (pValue < 1 - confidence && tails === 1) {\n    significant = true;\n  } else if (pValue > confidence + (1 - confidence) / 2) {\n    significant = true;\n  } else if (pValue < 1 - confidence - (1 - confidence) / 2 && tails === 2) {\n    significant = true;\n  } else {\n    significant = false;\n  }\n  return {\n    conversionRateChange,\n    conversionRates: {\n      A: conversionRateA,\n      B: conversionRateB\n    },\n    power,\n    pValue,\n    resultConfidence: confidence,\n    significant\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYzOTMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi91dGlsL2NhbGN1bGF0b3JzLmpzP2I3YTAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///16393\n")},69916:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   K: () => (/* binding */ lookupColorHexByName),\n/* harmony export */   O: () => (/* binding */ colors)\n/* harmony export */ });\n/* harmony import */ var _sm_wds_core_dist_themes_SurveyMonkey_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(54769);\n\nconst brandColors = _sm_wds_core_dist_themes_SurveyMonkey_json__WEBPACK_IMPORTED_MODULE_0__/* [\"brand-color\"] */ .Wn;\n\n// Supported WDS Colors.\nconst colors = {\n  arctic: '#ADCFEB',\n  bumblebee: brandColors['color--bumblebee'],\n  bengal: '#DA7B48',\n  canvas: '#F7F7F7',\n  charcoal: '#1E2124',\n  concord: '#53225B',\n  flint: '#D1D3D4',\n  midnight: brandColors['color--midnight'],\n  pebble: '#ECEDED',\n  raspberry: '#902B3C',\n  sabaeus: brandColors['color--sabaeus'],\n  slate: '#73747A',\n  stone: '#A1A4A7',\n  white: brandColors['color--white']\n};\n\n/**\n * Retrieves the hex code for the given color name.\n *\n * @param {string} name The color name to retrieve.\n *\n * @returns {string} The desired hex code, white if the color does not exist.\n */\nconst lookupColorHexByName = name => colors[name] || colors.white;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjk5MTYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vdXRpbC9jb2xvci5qcz9iNjM0Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///69916\n")},8021:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   e0: () => (/* binding */ getPackagePrices),\n/* harmony export */   it: () => (/* binding */ fetchPricingExperience)\n/* harmony export */ });\n/* unused harmony exports getPricingExperience, getCurrencyCode, getSkuId, getMonthlyPrice, getAnnualPrice, formattedCurrency */\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(64649);\n/* harmony import */ var _constants_billing_frequencies__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(64919);\n/* harmony import */ var _util_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(36274);\n/* harmony import */ var _constants_currencies__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(64312);\n/* harmony import */ var _util_locale__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(41533);\n/* harmony import */ var _constants_properties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(78961);\n/* harmony import */ var _util_observability__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(55126);\n\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n\n\n\n\n\n\n\n\n\n\n/**\n * Retrieve pricing details for the given experience.\n * This is used server-side only since it hits internal APIs.\n *\n * @param {String}  country      The country code to retrieve an experience for.\n * @param {String}  experience   The experience to retrieve.\n * @param {Boolean} includeCosts Whether or not to include prices with the experience info.\n * @param {String}  language     The language code to retrieve an experience for.\n *\n * @return {Object} The pricing experience data or an empty object if there was an error.\n */\nconst getPricingExperience = async _ref => {\n  let {\n    country = COUNTRY_US,\n    experience = '',\n    includeCosts = false,\n    language = LANG_EN_US\n  } = _ref;\n  // Bail if there is no experience provided.\n  if (experience === '') {\n    return {};\n  }\n  const params = new URLSearchParams({\n    country,\n    include_costs: includeCosts ? 'true' : 'false',\n    // Forcefully \"stringify\" the boolean value since the method does it differently.\n    language\n  }).toString();\n  const host = process.env.SM_PRICINGSVC_VIP;\n  const timeout = parseInt(process.env.SM_PRICINGSVC_TIMEOUT, 10);\n  const uri = `http://${host}/v4/experience/${experience}?${params}`;\n  let expData = {};\n  try {\n    const {\n      data = {},\n      status\n    } = await apiFetchService({\n      timeout,\n      uri\n    });\n    if (status === 200) {\n      expData = data;\n    }\n  } catch (error) {\n    reportError({\n      error,\n      severity: 'info'\n    });\n  }\n  return expData;\n};\n\n/**\n * Retrieve pricing details for the given experience.\n * This is used client-side only since it hits our public API.\n *\n * @param {String}  experience   The experience to retrieve.\n * @param {Boolean} includeCosts Whether or not to include prices with the experience info.\n *\n * @return {Object} The pricing experience data or an empty object if there was an error.\n */\nconst fetchPricingExperience = async _ref2 => {\n  let {\n    experience = '',\n    includeCosts = false\n  } = _ref2;\n  let expData = {};\n  try {\n    // Build the request body with params needed for pricing experience.\n    const params = {\n      experience,\n      includeCosts: includeCosts ? 'true' : 'false' // We need to \"stringify\" the boolean values.\n    };\n\n    const config = {\n      headers: {\n        'Content-type': 'application/x-www-form-urlencoded'\n      },\n      withCredentials: true\n    };\n\n    // Fetch the data from our public API and save it.\n    const {\n      data = {},\n      status\n    } = await (0,_util_api__WEBPACK_IMPORTED_MODULE_1__/* .apiFetchService */ .wK)({\n      config,\n      payload: new URLSearchParams(params).toString(),\n      uri: `${_constants_properties__WEBPACK_IMPORTED_MODULE_2__/* .PATHS */ .yy.pricing}/`\n    });\n    if (status === 200) {\n      expData = data;\n    }\n  } catch (error) {\n    (0,_util_observability__WEBPACK_IMPORTED_MODULE_3__/* .reportError */ .eK)({\n      error,\n      severity: 'info'\n    });\n  }\n  return expData;\n};\n\n/**\n * Get the currency code from the provided currency type id.\n * Defaults to US Dollars if there is an invalid currency.\n *\n * @param {Integer} currencyTypeId The currency type id.\n *\n * @return {String} The 3 letter currency code.\n */\nconst getCurrencyCode = function () {\n  let currencyTypeId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  return _constants_currencies__WEBPACK_IMPORTED_MODULE_4__/* .CURRENCY_TYPE_ID */ .d[currencyTypeId] || _constants_currencies__WEBPACK_IMPORTED_MODULE_4__/* .CURRENCY_TYPE_ID */ .d[1];\n};\n\n/**\n * Get the sku type id from the provided sku type.\n *\n * @param {String} currencyTypeId The provided sku type.\n *\n * @return {Number} The sku type id.\n */\nconst getSkuId = skuType => {\n  if (!skuType) return 0;\n  return PRICING_SKU_TYPE_ID[skuType] || 0;\n};\n\n/**\n * Calculate the monthly price for a sku cost.\n *\n * @param {Number} cost The sku cost.\n * @param {Number} billingFrequency The billing frequency.\n *\n * @return {Number} The monthly price.\n */\nconst getMonthlyPrice = (cost, billingFrequency) => {\n  const monthlyPrice = cost / 100 / billingFrequency;\n\n  // Round to max 2 decimal places\n  return parseFloat(monthlyPrice.toFixed(2));\n};\n\n/**\n * Calculate the yearly price for a sku cost.\n *\n * @param {Number} cost The sku cost.\n * @param {Number} billingFrequency The billing frequency.\n *\n * @return {Number} The yearly price.\n */\nconst getAnnualPrice = (cost, billingFrequency) => {\n  let annualPrice;\n  if (billingFrequency === _constants_billing_frequencies__WEBPACK_IMPORTED_MODULE_5__/* .MONTHLY_BILLING_FREQUENCY */ .b) {\n    annualPrice = cost * _constants_billing_frequencies__WEBPACK_IMPORTED_MODULE_5__/* .ANNUAL_BILLING_FREQUENCY */ .m / 100;\n  } else {\n    annualPrice = cost / 100;\n  }\n\n  // Round to max 2 decimal places\n  return parseFloat(annualPrice.toFixed(2));\n};\n\n/**\n * Format a value for a particular currency.\n *\n * @param {String}  code  The 3 letter currency code.\n * @param {Number}  cost  The amount to include with the currency.\n * @param {Object}  intl  The react-intl object, used to get the locale.\n * @param {Boolean} short Enable to exclude decimal places.\n *\n * @returns {String}\n */\nconst formattedCurrency = _ref3 => {\n  let {\n    code,\n    cost,\n    locale,\n    short = false\n  } = _ref3;\n  let options = {\n    currency: code,\n    currencyDisplay: 'symbol',\n    style: 'currency'\n  };\n  if (short) {\n    options = _objectSpread(_objectSpread({}, options), {}, {\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    });\n  }\n  return (0,_util_locale__WEBPACK_IMPORTED_MODULE_6__/* .formattedNumber */ .kH)(cost, locale, options);\n};\n\n/**\n * Calculate and format monthly an annual prices for the given package and locale.\n *\n * @param   {Object}  packageDetails The package to get prices for.\n * @param   {String}  locale         The locale to format the price in.\n *\n * @return  {Object}                 An object containing the annual and monthly prices as formatted currencies.\n */\nconst getPackagePrices = (packageDetails, locale) => {\n  const {\n    billing_frequency = null,\n    sku_costs = null // The default value in the API response is `null` so we match that behavior here.\n  } = packageDetails;\n  const {\n    1: {\n      currency_type_id = 1,\n      cost = 0\n    } = {}\n  } = sku_costs ?? {}; // Deal with a null default value by assigning an empty object.\n\n  // If we do not have an actual cost, just return now.\n  if (cost === 0) {\n    return {\n      annualPrice: 0,\n      monthlyPrice: 0\n    };\n  }\n  const code = getCurrencyCode(currency_type_id);\n  const annualPrice = formattedCurrency({\n    code,\n    cost: getAnnualPrice(cost, billing_frequency),\n    locale,\n    short: true\n  });\n  const monthlyPrice = formattedCurrency({\n    code,\n    cost: getMonthlyPrice(cost, billing_frequency),\n    locale,\n    short: true\n  });\n  return {\n    annualPrice,\n    monthlyPrice\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODAyMS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vdXRpbC9wcmljaW5nLmpzPzllYzciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8021\n")},85050:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IN: () => (/* binding */ getTemplatesForCategory),\n/* harmony export */   Jc: () => (/* binding */ sortSurveyTemplatesByTraffic),\n/* harmony export */   Jo: () => (/* binding */ getSurveyTemplateCategories)\n/* harmony export */ });\n/* harmony import */ var _util_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(36274);\n/* harmony import */ var _util_observability__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(55126);\n/* harmony import */ var _constants_survey_templates__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3853);\n\n\n\n\n/**\n * Retrieve the survey templates for the given category.\n *\n * @param {String} category The category to retrieve templates for.\n * @param {Number} postId   The current post ID to exclude from the results.\n *\n * @returns {Array} An array of survey templates.\n */\nconst getTemplatesForCategory = async _ref => {\n  let {\n    category,\n    postId = 0\n  } = _ref;\n  let templates = [];\n  const params = {\n    per_page: 50,\n    // Get all templates so they can be sorted by the component.\n    survey_templates: category,\n    exclude: postId\n  };\n  try {\n    const {\n      data = [],\n      status\n    } = await (0,_util_api__WEBPACK_IMPORTED_MODULE_0__/* .apiFetch */ .SC)({\n      path: 'template',\n      args: params\n    });\n    if (status === 200) {\n      templates = data;\n    }\n  } catch (error) {\n    (0,_util_observability__WEBPACK_IMPORTED_MODULE_1__/* .reportError */ .eK)({\n      error\n    });\n  }\n  return templates;\n};\n\n/**\n * Retrieve the survey template categories.\n *\n * @returns {Array} An array of survey template categories.\n */\nconst getSurveyTemplateCategories = async () => {\n  let categories = [];\n  try {\n    const {\n      data = [],\n      status\n    } = await (0,_util_api__WEBPACK_IMPORTED_MODULE_0__/* .apiFetch */ .SC)({\n      path: 'survey_templates'\n    });\n    if (status === 200) {\n      categories = data;\n    }\n  } catch (error) {\n    (0,_util_observability__WEBPACK_IMPORTED_MODULE_1__/* .reportError */ .eK)({\n      error\n    });\n  }\n  return categories;\n};\n\n/**\n * Sorts an array of survey templates objects descending by their traffic\n * as measured in Google Analytics.\n *\n * @param {String} templates An unsorted array of survey template objects.\n *\n * @returns {Array} The sorted array of survey template objects.\n */\nconst sortSurveyTemplatesByTraffic = templates => {\n  return templates.sort((first, second) => {\n    return (_constants_survey_templates__WEBPACK_IMPORTED_MODULE_2__/* .SURVEY_TEMPLATE_TRAFFIC */ .Q[second.path] || 0) - (_constants_survey_templates__WEBPACK_IMPORTED_MODULE_2__/* .SURVEY_TEMPLATE_TRAFFIC */ .Q[first.path] || 0);\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODUwNTAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi91dGlsL3N1cnZleS10ZW1wbGF0ZXMuanM/MmQyYiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///85050\n")},34467:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ew: () => (/* binding */ getBreakdownValues),\n/* harmony export */   NX: () => (/* binding */ filterQuestionsByBreakdown),\n/* harmony export */   P4: () => (/* binding */ formatSurveyDates),\n/* harmony export */   UW: () => (/* binding */ sortBreakdowns),\n/* harmony export */   Wd: () => (/* binding */ sortQuestions),\n/* harmony export */   fU: () => (/* binding */ getBreakdownByLabel),\n/* harmony export */   wB: () => (/* binding */ commaSeparatedSampleSize)\n/* harmony export */ });\n/* unused harmony export getBannerPercentage */\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(64649);\n\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .Z)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n/**\n * Given an array of questions and a breakdown label, returns a modified array\n * of questions that only includes breakdown and banner information for the\n * given breakdown. The remainder of the data structure for the array of\n * questions remains unchanged.\n * @param {Array} questions - The array of questions to be filtered.\n * @param {String} label - The breakdown label to filter by.\n * @returns {Array} - The modified array of questions.\n */\nconst filterQuestionsByBreakdown = (questions, label) => {\n  return questions.map(question => _objectSpread(_objectSpread({}, question), {}, {\n    answers: question.answers.map(answer => _objectSpread(_objectSpread({}, answer), {}, {\n      banner: answer.banner.filter(_ref => {\n        let {\n          label: bannerLabel\n        } = _ref;\n        return label === bannerLabel;\n      })\n    })),\n    breakdowns: question.breakdowns.filter(_ref2 => {\n      let {\n        label: breakdownLabel\n      } = _ref2;\n      return label === breakdownLabel;\n    })\n  }));\n};\n\n/**\n * Given a sample size, correctly format the number with commas.\n * returns a comma separated value.\n * @param {Number} value - The sample size to format.\n * @returns {String} - The comma sep'd sample size.\n */\nconst commaSeparatedSampleSize = value => {\n  return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n};\n\n/**\n * Given a date, return a mm/dd/yyyy format.\n * @param {Date} date - The date to format.\n * @returns {String} - The formatted date string.\n */\nconst formatSurveyDates = date => {\n  if (!date) {\n    return;\n  }\n  const rawDate = new Date(date);\n  if (Number.isNaN(rawDate)) {\n    return;\n  }\n  const year = rawDate.toLocaleString('en-US', {\n    year: 'numeric',\n    timeZone: 'UTC'\n  });\n  const month = rawDate.toLocaleString('en-US', {\n    month: 'numeric',\n    timeZone: 'UTC'\n  });\n  const day = rawDate.toLocaleString('en-US', {\n    day: 'numeric',\n    timeZone: 'UTC'\n  });\n  return month + '/' + day + '/' + year;\n};\n\n/**\n * Given an array of banner entries, a breakdown label, and a breakdown value,\n * returns the percentage for the given combination.\n * @param {Array} banner - An array of banner objects.\n * @param {String} label - The breakdown label to match against.\n * @param {String} value - The breakdown value to match against.\n * @returns {Number} - The percentage that matches the query, or -1 for not found.\n */\nconst getBannerPercentage = (banner, label, value) => {\n  // Attempt to extract the breakdown from the banner.\n  const breakdown = banner.find(compare => compare.label === label);\n  if (!breakdown) {\n    return -1;\n  }\n\n  // Attempt to extract the value from the breakdown.\n  const breakdownValue = breakdown.breakdown.find(compare => compare.value === value);\n  if (!breakdownValue) {\n    return -1;\n  }\n  return breakdownValue.percentage;\n};\n\n/**\n * Given an array of breakdowns and a label, returns the breakdown object that\n * matches the provided label.\n * @param {Array} breakdowns - The breakdowns array to search through.\n * @param {String} label - The label to search for.\n * @returns {Object|undefined} - The breakdown object if found, undefined otherwise.\n */\nconst getBreakdownByLabel = (breakdowns, label) => {\n  return breakdowns.find(breakdown => label === breakdown.label);\n};\n\n/**\n * Given an answer object and a breakdown config object, returns an array of\n * values to be inserted into the table for that particular answer/breakdown\n * combination, which begins with the total value for the answer, and is\n * followed by the breakdown values in the same order as they appear in the\n * breakdown config object. Assumes the breakdown config object is already\n * properly sorted.\n * @param {Object} answer - The answer to process for values.\n * @param {Object} breakdown - The breakdown to use for value ordering.\n * @returns {Array} - An array of values matching the given breakdown.\n */\nconst getBreakdownValues = (answer, breakdown) => {\n  return [answer.percentage, ...breakdown.breakdown.map(breakdownValue => getBannerPercentage(answer.banner, breakdown.label, breakdownValue.value))];\n};\n\n/**\n * Sorts an array of breakdowns by question order, then answer order.\n * @param {Array} breakdowns - An array of breakdown objects to sort.\n * @returns {Array} - The sorted array.\n */\nconst sortBreakdowns = breakdowns => {\n  return breakdowns\n\n  // Sort by the `order` property on the breakdown question.\n  .sort((a, b) => a.order - b.order)\n\n  // Loop through each breakdown and sort the answers by their `order` property.\n  .map(breakdown => {\n    breakdown.breakdown.sort((a, b) => a.order - b.order);\n    return breakdown;\n  });\n};\n\n/**\n * Given an array of questions, sorts the questions by the `order` property,\n * and sorts the answers for each question by their `order` property.\n * @param {Array} questions - The array to sort.\n * @returns {Array} - The sorted array.\n */\nconst sortQuestions = questions => {\n  return questions.sort((a, b) => a.order - b.order).map(question => {\n    question.answers.sort((a, b) => a.order - b.order);\n    return question;\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQ0NjcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3V0aWwvdG9wbGluZS5qcz84MmMzIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///34467\n")}}]);