let e,t,n,i;const r={passive:!0,capture:!0},a=new Date,s=()=>{i=[],t=-1,e=null,l(addEventListener)},o=(i,r)=>{e||(e=r,t=i,n=new Date,l(removeEventListener),c())},c=()=>{if(t>=0&&t<n-a){const n={entryType:"first-input",name:e.type,target:e.target,cancelable:e.cancelable,startTime:e.timeStamp,processingStart:e.timeStamp+t};i.forEach((function(e){e(n)})),i=[]}},m=e=>{if(e.cancelable){const t=(e.timeStamp>1e12?new Date:performance.now())-e.timeStamp;"pointerdown"==e.type?((e,t)=>{const n=()=>{o(e,t),a()},i=()=>{a()},a=()=>{removeEventListener("pointerup",n,r),removeEventListener("pointercancel",i,r)};addEventListener("pointerup",n,r),addEventListener("pointercancel",i,r)})(t,e):o(t,e)}},l=e=>{["mousedown","keydown","touchstart","pointerdown"].forEach((t=>e(t,m,r)))};let p="hidden"===document.visibilityState?0:1/0;const d=e=>{"hidden"===document.visibilityState&&(p=e.timeStamp,removeEventListener("visibilitychange",d,!0))};addEventListener("visibilitychange",d,!0);s(),self.webVitals={firstInputPolyfill:e=>{i.push(e),c()},resetFirstInputPolyfill:s,get firstHiddenTime(){return p}};class f extends HTMLElement{constructor(){super(...arguments),this.marked=!1}connectedCallback(){if(this.marked)return;const e=this.getAttribute("name");if(!e)throw new Error("No name attribute specified on faceplate-perfmark element.");window.performance.mark(e),this.marked=!0}}customElements.define("faceplate-perfmark",f);
;